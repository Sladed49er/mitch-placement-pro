// prisma/schema.prisma
// INCREMENTAL UPDATE - Safe approach that preserves existing data

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// EXISTING MODELS (Unchanged)
// ==========================================

model Carrier {
  id                String   @id @default(cuid())
  carrierId         String   @unique
  name              String
  parentCompany     String?
  amBestRating      String?
  headquarters      String?
  provinces         String[]
  minPremium        Float?
  maxRevenue        Float?
  commissionNew     Float?
  commissionRenewal Float?
  responseTime      String?
  apiEnabled        Boolean  @default(false)
  apiDetails        Json?
  partnerStatus     String?
  specialties       String[]
  products          Json?
  underwritingGuidelines Json?
  brokerPortal      Json?
  contactInfo       Json?
  
  agencySettings    AgencyCarrierSetting[]
  placements        Placement[]
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([carrierId])
  @@index([name])
}

model AgencyCarrierSetting {
  id                String   @id @default(cuid())
  carrierId         String
  carrier           Carrier  @relation(fields: [carrierId], references: [carrierId], onDelete: Cascade)
  
  agencyStatus      String   @default("not-appointed")
  appointmentDate   DateTime?
  
  commissionNew     Float?
  commissionRenewal Float?
  volumeBonus       Float?
  contingentBonus   Json?
  
  contacts          Json?
  performance       Json?
  appetiteNotes     Json?
  systemAccess      Json?
  notes             Json?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  updatedBy         String?
  
  @@unique([carrierId])
  @@index([agencyStatus])
}

// ==========================================
// UPDATED PLACEMENT MODEL (with optional user fields)
// ==========================================

model Placement {
  id                String   @id @default(cuid())
  referenceNumber   String   @unique @default(cuid())
  
  // NEW: Optional user association (won't break existing records)
  userId            String?  // Made optional for existing data
  user              User?    @relation(fields: [userId], references: [id])
  agencyId          String?
  agency            Agency?  @relation(fields: [agencyId], references: [id])
  
  // Existing fields remain unchanged
  businessName      String
  postalCode        String
  city              String
  province          String
  contactName       String
  contactEmail      String
  contactPhone      String
  
  businessType      String?
  naicsCode         String?
  naicsDescription  String?
  revenue           Float?
  employees         Int?
  yearsInBusiness   Int?
  
  coverageType      String[]
  effectiveDate     DateTime?
  expiryDate        DateTime?
  
  selectedCarriers  String[]
  carrierId         String?
  carrier           Carrier? @relation(fields: [carrierId], references: [id])
  
  status            String   @default("draft")
  
  // NEW: Optional AI and enhanced fields
  aiPredictions     Json?
  aiScore           Float?
  matchResults      Json?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?
  
  // NEW: Relations
  activities        ActivityLog[]
  notes             Note[]
  
  @@index([referenceNumber])
  @@index([businessName])
  @@index([status])
  @@index([userId])
}

// ==========================================
// ENHANCED USER MODEL (Updated from basic)
// ==========================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String?
  password          String?  // Optional initially for existing records
  role              String   @default("broker")
  
  // NEW: Optional fields
  agencyId          String?
  agency            Agency?  @relation(fields: [agencyId], references: [id])
  phone             String?
  title             String?
  isActive          Boolean  @default(true)
  lastLogin         DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // NEW: Relations
  placements        Placement[]
  activities        ActivityLog[]
  savedSearches     SavedSearch[]
  sessions          Session[]
  notes             Note[]
  
  @@index([email])
  @@index([agencyId])
}

// ==========================================
// NEW MODELS FOR AUTHENTICATION
// ==========================================

model Agency {
  id              String   @id @default(cuid())
  name            String
  licenseNumber   String?  @unique
  primaryContact  String?
  phone           String?
  email           String?
  city            String?
  province        String?
  postalCode      String?
  isActive        Boolean  @default(true)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  users           User[]
  placements      Placement[]
  
  @@index([name])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ActivityLog {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  placementId  String?
  placement    Placement? @relation(fields: [placementId], references: [id])
  action       String
  details      Json?
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime  @default(now())
  
  @@index([userId])
  @@index([placementId])
  @@index([action])
  @@index([createdAt])
}

model SavedSearch {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  criteria    Json
  lastUsed    DateTime @default(now())
  useCount    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model Note {
  id           String    @id @default(cuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  placementId  String?
  placement    Placement? @relation(fields: [placementId], references: [id])
  content      String    @db.Text
  type         String    @default("general")
  isPrivate    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@index([userId])
  @@index([placementId])
}

// ==========================================
// EXISTING NAICS MODEL (if you have it)
// ==========================================

model NAICS {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  category    String?
  riskLevel   String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([code])
  @@index([category])
}